minimalist, unopinionated and flexible web application

helps build web application 

provids powerful tools for handling routing, middleware, HTTP request/responses 
and static files 


features : 
    light weight and minimalist
    unopinionated : dont impose strict rule 
    robust routing : routes, URL parameters, query strings and middleware
    HTTP utility methods : res.send(), res.json(), res.status(), req.params, req.query 
    static file serving : express.static()  
    templating engine support : EJS, pug
    Error handling : error handling middleware 
    database flexibility : mongoDB via mongoose, postgreSQL/MySQL, redis, firebase, supabase 
    websockets and real-time communication 

    code : 

    const express = require("express")
    const app=express();
    cons PORT = 3000;

    app.get("/", (req,res)=>{
        res.send("welcome to my express server!");
    })

    app.post("/submit", (req,res)=> {
        res.send("Data received successfully!");
    })

    app.use((req,res)=>{
        res.status(404).send("page not found");
    })

    app.listen(PORT, () => {
        console.log(`server running on http://localhost:${PORT}`);
    })


    Routing : 

        refers to defining different endpoints (URIs) and specifying how they
        respond to client requests.

        GET : retrieve data 
        POST : create new data 
        PUT : update existing data 
        DELETE : remove data 

        app.get("/users", (req, res) => res.send("fertching users"));

        app.get("/users/:id", (req,res)=>{
            res.send(`user ID is ${req.params.id}`);
        })

        Query String 

        app.get("/search",(req,res) => {
            res.send(`search term : ${req.query.term})
        })

        /search?term=laptop&category=electronics 

        regular expressions in routes 

            app.get("/products/:category([a-z]+)", (req, res) => {
                res.send(`category : ${req.params.category}`);
            })

            


    Creating server using node : 

        const http = require("http");
        const PORT = 2000;
        const users = require("./MOCK_DATA.json");
        const fs = require("fs");
        
        const server = http.createServer((req, res) => {
            const { method, url } = req;
            
            res.setHeader("Content-Type", "application/json");
            
            if (method === "GET" && url === "/api/users") {
                res.end(JSON.stringify(users));
            }
            
            if (method === "GET" && url === "/users") {
                res.setHeader("Content-Type", "text/html");
                const html = `<ul> ${users
                .map((user) => `<li>${user.first_name}</li>`)
                .join("")} </ul>`;
                res.end(html);
            }
            
            if (req.method === "POST" && req.url === "/api/users") {
                let body = "";
                req.on("data", (chunk) => {
                body += chunk.toString();
                });
            
                req.on("end", () => {
                body = JSON.parse(body);
                users.push({ ...body, id: users.length + 1 });
                fs.writeFile("./MOCK_DATA.json", JSON.stringify(users), (err, data) => {
                    return res.end(
                    JSON.stringify({
                        status: "success",
                        message: "Users added Succeesfully",
                    })
                    );
                });
                });
            }   
        });
        
        server.listen(PORT, () => console.log(`Server Started on ${PORT}`));
 
 
    Nested Routes : 

        const express = require('express');
        const app = express();
        const userRouter = express.Router();

        // Nested route for user profile
        userRouter.get('/:userId/profile', (req, res) => {
            const userId = req.params.userId;
            res.send(`User Profile of ${userId}`);
        });

        // Nested route for user settings
        userRouter.get('/:userId/settings', (req, res) => {
            const userId = req.params.userId;
            res.send(`User Settings of ${userId}`);
        });

        // Mount the userRouter on the '/user' path
        app.use('/user', userRouter);

        app.listen(3000, () => {
            console.log('Server is running on port 3000');
        });



Routing and pagination : 

    GET /products?price[gte]=10&price[lte]=100&name[like]=*phone*
    GET /products?sort=price,-rating


error handling middleware : 

    const errorHandler = (err, req, res, next) => {
        let { statusCode, message } = err;

        if (!statusCode) statusCode = 500; // Default to 500 for unhandled errors
        if (!message) message = "Something went wrong!";

        console.error(`[Error] ${message}`);

        res.status(statusCode).json({
            success: false,
            error: message,
        });
    };

sequelize : 

    makes it easy to work with SQL database like MYSQL, postgreSQL 
        pros : 
            simplifies database interaction with models 
            supports migrations, validations and associations 
            works with postgreSQL,MySQL, MariaDB, SQLite and MSSQL 

        cons : 
            slightly slower due to the abstraction layer.
            Can be complex when writing optimized queries 
        

    code : 

        //connect to DB 
        const { Sequelize } = require('sequelize');

        const sequelize = new Sequelize('database_name', 'username', 'password', {
        host: 'localhost',
        dialect: 'mysql', // Can be 'postgres', 'sqlite', 'mssql'
        });

        async function connectDB() {
        try {
            await sequelize.authenticate();
            console.log('Connection established successfully!');
        } catch (error) {
            console.error('Unable to connect:', error);
        }
        }

        connectDB();

        //define models 
        import { Sequelize, DataTypes } from 'sequelize';

        const sequelize = new Sequelize('sqlite::memory:');
        const User = sequelize.define('User', {
        username: DataTypes.STRING,
        birthday: DataTypes.DATE,
        });

        //persists and query 
        const jane = await User.create({
            username: 'janedoe',
            birthday: new Date(1980, 6, 20),
        });

        const users = await User.findAll();

knex.js : 

    can be used as an SQL query builder in both node and browser 
    pros : 
        more control over raw queries 
        faster than sequelize (no ORM over head)
        supports multiple SQL databases 
        works well with other ORMs like Objection.js 
    
    cons : 
        no built-in model management 
        more manual setup for relationship 

    

    code: 
        //configuration option 
        const knex = require('knex')({
            client: 'mysql',
            connection: {
                host: '127.0.0.1',
                port: 3306,
                user: 'your_database_user',
                password: 'your_database_password',
                database: 'myapp_test',
            },
        });

    the connection options are passed directly to the appropriate 
    database client to create the connection and may be either 
    an object a connection string or a function returning an object 

multer : 

    middleware for handling multipart/form-data, 
    used of file uploads 
    it stores them in either : 
        in memory (as a buffer)
        on disk (in a spe   cific folder)
        in external storage (amazon S3, cloudinary, etc )

    working : 
        parses multipart/form-data from HTTP requests 
        stores the uploaded file based on defined storage options 
        attaches file metadata (filename, size, path) to req.file  
    

    code : 

        const storage = multer.diskStorage({
            destination : function(req, file, cb){
                cb(null, 'uploads/'); //save files in 'uploads/' folder 
            
            },
            filename : function (req, file, cb) {
                cb(null, file.filename + '-' + Date.now() + path.extname(file.originalname));

            }
        });
        const upload = multer({storage : storage});

        //use 
        app.post('/upload',upload.single('file'), (req, res)=>{
            if(!req.file)
            {
                return res.status(400).send('no file uploaded');
            }

            res.json({file:req.file});
        })


Env variables : 

    are key-value pairs that store system-level or app specific
    confguraiotns outside your source code 

        helps in : 
            storing secrets 
            defining runtime configurations (NODE_ENV=production)
            keeping code clean (no hradcoded values)
    




EXpress framework 

    most popular nodejs framwork 
    requires minimum setup to start an app or an api 
    fast 
    pre-req : node(npm)


    code : 

        const express = require('express');

        const app = express();

        app.get('/',function(req, res){
            res.send("hello world");
        })

        app.listen(4000, console.log("server is running"));

Node package manager :
    
    node package manager (npm) :
        cmd : npm install package-name 
        
        flags : 
            --dev or -D : development dependencies 
            -g : global installation

        
        cmd : npm uninstall package-name 
            remove package from node_modules folder 
        

express routing 

    routing : how an app resonds to a client req to a 
        particuler endpoint, which is a URL (or path) 
        and a specific HTTP request method (get,post,etc)
    
    each route can have one or more handler func 
        which are executed when the route is matched 
    
    code : app.METHOD(PATH, HANDLER)

    where : 
        app is an instance of express 
        METHOD is an HTTP request method 
        PATH is a path on the server 
        HANDLER : function executed when the route is matched


Node path module :

    simplifies file and dir path management 

    essential methods include join, resolve, basename,
    dirname and extname 

    using path module : 
        const path = require('path')

    ex. 
        path.resolve('./public'+fileUrl);
        path.extname(filePath)

        console.log(path.basename('/dir/file.txt')); // 'file.txt'
        console.log(path.basename('/dir/file.txt', '.txt')); // 'file'

        console.log(path.dirname('/dir/subdir/file.txt')); // '/dir/subdir'

        console.log(path.extname('/dir/file.txt')); // '.txt'

        console.log(path.join('/dir', 'subdir', 'file.txt')); // '/dir/subdir/file.txt'

        resolves a sequence of paths into an absolute path, 
            starting from the current working directory 
            or provided root 

        console.log(path.resolve('dir', 'file.txt')); // '/current/dir/file.txt' (absolute path)

        return if the path is absolute path or not 
            absolute path : starts from the root dir and goes to the end 
            It is independent of the current working directory.
        console.log(path.isAbsolute('/dir/file.txt')); // true
        console.log(path.isAbsolute('file.txt')); // false


What is fs module : 

    used to interact with the file system 

    key features : 
        file ops : 
            read/write/update/delete 
        
        directory ops : 
            creat/remove dirs 
        
        file metadata : 
            get file stats 
        
        synchronous and asynchronous APIs : 
            support both blocking and non-blocking 
            ops 
        
    code : 

    const fs = require('fs');

    fs.readFile('example.txt','utf-8',(err,data) => {
        if(err) throw err;
        console.log(data);
    })

    const data = fs.readFileSync('example.txt','utf8');
    console.log(data);


Express framwork :  

    minimal and flexible web application framework 
    for node.js designed for building web application 
    and APIs 

    provides : 

        routing 
        middleware 
        template engines
        error handling 
        static files 
        integration
    
    middleware : 

        accesses req object, res object and next middleware 
        function in the app's req res cycle 


        ex. 

            req -> body parsing -> auth -> router -> res 

        express has ability to employ middleware chaining 

        types : 

            app level vs route level 
                bound to instance of the express app 
                using app.use() 
            
                vs 

                bound to specific route 
            
            built-in middleware vs third-party middleware 

                provided by express 
                    express.json() : psrsing JSON 
                    express.static() : serving static files 

                third party : 
                    auth : passport.js
                    logging : morgan 
                    cors : cors()
                    nodemon : for development 
            
            custom middleware : VS code 
        

        nodemon : 

            untility that automatically monitors 
            for changes in your node.js application and 
            restart the server when changes are detected 


        morgan : 

            keeps track of all the req and logs them 

            code :

                npm install --save morgan 
                const logger = require('morgan')
                app.use(logger('combined'));

                formates : 
                    combined : stardard apache combined 
                        log output 
                    common : common log output 
                    dev : concise output colored by 
                        response status for development use 
                    short : shorter than common, only res time 
                    tiny : minimal output 
                    custom format  :
                        app.use(logger(':method :url :status :response-time ms'))
    
    app.use(express.json())
         
        built-in middleware function in express 
        parses incoming req with JSON payloads 
            and converts to JS objects 
        parsed JS obj can be accessed by using req.body 
            directly 
    
    app.use(express.static('public'))

        built-in middleware function 
        
        'public' indicates the folder from which to serve 
            static assets 
            
            file placed in public dir wil be accessible 
            via http requests 

        other benefits : 
            u dont have to create saparate routes for 
                each static file
            express handles caching and content-type 
                settings for you 
            keeping static files in a dedicated folder
                helps maintain your project structure 
        
    app.use(cors()) 

        cross origin resource sharing : a security feature 
        implemented by web browser to prevent malicious websites 
        from making reqs from different origins 

            origin includes the protocol, domain and port 
            domain refers only to the domain name 
        
        cross-origin 
            if abc.com/users req something from abc.com/search 
                same-origin req 
            if abc.com/users req something from xyz.com/search 
                it's a cross-origin request 
            
        purpose : 
            allows servers to specify who can access their resources

        CORS headers :  
            access-control-allow-origin : specifies which origin 
                are allowed 
            access-control-allow-methods : specifies allowed http 
                methods 
            access-control-allow-Headers : specifies allowed heaader
                in the request 
        
        configuring CORS : 

            const corsOptions = {
                origin : 'https://example.com',
                methods : ['GET','POST'],
                allowedHeader : ['Content-Type'],
            }

            app.use(cors(corsOptions));

            // when not specified all the things are allowed 
        
        fetch related issue : 

            if we try fetching to localhost from file : origin-null     
            browser will block this 
        
        fetch API limitation : CORS 

            COR policy : cross-origin resource sharing : 
                browser policies for what resources a web page can load 

                    u make same-origin request by default 
                    for any request type 

                    ucan make cross-origin req by default for :
                        images loaded via <img>
                        CSS files loaded via <link>
                        js files loaded via <script> 

                    u cannot make cross origin req by default for :
                        resources loaded via fetch() or XHR

                    u cannot fetch a resource that is hosted on file ://
                        u must serve your resource over HTTP/HTTPs 
                        open html file using live server in VS code 

            Cross Origin solution : 

                problem : 
                    we are trying to fetch() localhost from file://

                sol : 
                    change the server running on localhost to allow 
                        cross origin req using res header 

                        code :

                            app.use((req, res, next) => {
                            res.setHeader('Access-Control-Allow-Origin', '*'); // Allow all origins
                            res.setHeader('Access-Control-Allow-Methods', 'GET, POST'); // Allowed methods
                            res.setHeader('Access-Control-Allow-Headers', 'Content-Type'); // Allowed headers
                            next();
                            });

                    preferred sol : load frontend code statically 
                        from the same server so that req is from same 
                        server

                        code : 

                        const express = require('express');
                        const app = express();

                        // Serve frontend files
                        app.use(express.static('public'));

                        // Start server
                        app.listen(3000, () => console.log('Server running on http://localhost:3000'));
                    
                    use middleware that handles cors errors
                        
                        code : 
                            app.use(cors()); // Automatically handles CORS

                 sol 1 : 

                    enable CORS 

                    code : ServerCORS

                        app.get('/', function (req, res){
                            res.header('Access-Control-Allow-Origin','*');
                            res.send('Main page');
                        })


Dotenv module : 

    loads environment variables from .env file into 
        process.env instead of hardcoding in your code 

        helps keep config settings saparate from code 
        easily switch btw development, testing and 
            prod configs 
        process.env is an object in Node.js that provides   
            access to environment vars 
        
bcrypt.js

    there are tow imp methods 
        hasing : use hash or hashSync to create hashed password 
        comparison : use compare or compareSynce to check 
            if a password matches a hased pass.
        
        method          params                              comments 

        hash            password, saltOrRounds, callback    calls callback with error and hased password
        hashSync        password, saltOrRounds              returns hased password 
        compare         password, hash, callback            calls callback with error and boolean (match result)
        compareSync     password, hash                      return boolean (match result)

    
    algo : a secure pass hashing func that uses salting 
    and a configurable work factor to enhance security 
    against brut-force attacks

    salting : practice of adding a unique random value 
    to each pass before hashing, making identical pass hash 
    to different values and improving security 

    final output is a string that includes both salt and 
    hashed pass, often formatted as follows 

    $2a$10$randomSaltValue$hashedPassword

    bcryptAlgoVersion - saltRounds - salt - hashedPassword 




Sending Data to the server 

    route params
    query params 

    a param defined in the URL of the request is often 
    called a route param 

    how to read the route params in our server 

        we can use the : variableName syntax in the 
        path to specify a route param 

        to access the route params use req.params 

        Router Parameters 

            server Side : 

                app.get('/hello/:name', function(req, res){
                    const reouteParams = req.params;
                    const name = routeParams.name;
                    res.send('GET : Hello, ' + name);
                })

            client side : 

                browser : http://local:port/hello/SB 
        

        multiple route params in URL 

            app.get('/flights/:from-:to', function(req, res){
                const routeParams = req.params;
                const from = routeParams.from;
                const to = routeParams.to;
                res.send('GET : flights from ' + from + 'to' + to );
            })

        Query parameters 

            to read query params : req.query 

            server side : 

                app.get('/hello', function(req, res){
                    const queryParams = req.query;
                    const name = queryParams.name;
                    res.send('GET : HEllo, ' + name); 
                })
            
            client side : 

                fetch('/hello?name=SB')
                    .then(onResponse)
                    .then(onTextReady);
                
                (for post : fetch('/hello?name=SB', {method:POST}))
                    .then(onResponse)
                    .then(onTextReady);

        POST message body 

            instead, specify a message in ur fetch() call
            
            const message = {
                name : "SB",
                email : "SB@gmail.com"
            }

            const fetchOptions = {
                method : 'POST',
                header : {
                    'Accept':'applcation/json',
                    'Content-type':'application/json'
                },
                body : JSON.stringify(message)
            }

            fetch('/helloparsed', fetchOptions)
                .then(onResponse)
                .then(onTextReady)

Sending data 

    u can deliver parameterized info to the server in the 
    these ways : 

        router params 
        GET request with query params 
        POST request with message body 
    
GET vs POST 

    get : to retrive data 

    post : to write data 
        patch : update specific 
        delete : delete specific resource 
    

Route parameters vs Query parameters 

    route params : 

        used to identify specific resource like user 
            using userID 
    
    query params : 

        used for filtering, sorting, pagination or 
            optional parameters 
        
        easier to add/remove 
    ex. 


        Client : put : /users?userid=123&name=johnDoe

        server : put : /users 

            but it should be like this 
        
        client : put : /users/123?name=johnDoe 

        server : put : /users/:userid 

            another 

        client : post /users?name=john 

        server : post /users 

            but it should be 

        client : post /users with body {name:'john'};

        server : same  


commonly used query params 

    search 
    sort 
    page 
    perPage 
    filter 
    category 
    status 
    dateFrom 
    location 

Middleware 

    a function that has access to the req obj, res obj 
    and next() middleware func in app's req res cycle 

    taskS : logging, auth, body parsing, error handling,
            validation, adding header info 
        
    Order/sequence of the middleware 

        middleware is executed in the order it is defined 

        always use next() to pass control 
            to the next middleware for custom middleware 

                inbuilt/third party middleware have a 
                    default call to next();
        
        different set of middleware functions for 
            different routes 

            app.use(middleware)
            app.get('/path', middleware)

    custom middleware 

        next() is crucial for flow 

        if not used then it disrupts the req-res cycle 
        and the app will become unresponsive for that req   

            req is not processed 
                middlware dont pass the control of data to 
                next function 

            res not sent 
                if res.send() or res.json() is not send 
                then client will wait for never coming res

            blocking behavior 
                leads to potential deadlock 
                in app flow 
            
Authentication vs authorisation 

    authentication : 
        the process of verifying the identity of a user 
        answer : who are you 
    
    Authorization :    
        the process of determining what an authenticated 
        user is allowed to do. 
        answer : what can you do 

1 Stateless VS 2 stateful authentication 


    1 (token-based )    
        server does not store any user info
        each req is independent and must contain all 
            the necessary info for authentication 
            typically through token 
            used in SPA 

    2 (session based)
        server stores all the authenticates user data 
            in database 
        the client holds session ID in cookie 

JSON Web Tokens (JWT) 

    json web tokens are an open standard for securely 
    transmitting info btw parties 

        users authenticates by receiving a JSON web 
            token after logging in, which they include 
            in the header of subsequent request 
        
        consists these steps : 

            generating a payload 
            generating a token 
            signing a token (by server) and verifying the 
                token(by server )
            
    JWT structure :

        header 
            type of token 
            signing algorithm 

        payload 
            contains claims 
            additional data 

        signature   
            created using the header, payload and secret key 
            ensure integrity (token is not altered)

    JWT sign and verify : 

        const token = jwt.sign({username}, 
            'your_secret_key',
            {expiresIn : '1h'});
        

        jwt.verify(token, 'your_secret_key', (err, decoded) => {
            if(err){
                console.log('token verification', err.message);
            }
            else 
            {
                console.log('decoded payload', decoded)
            }
        })

Model : 

    represents data stucture and data interactions

View :

    UI, often rendered using templating engines like 
    EJS, pug or handlebars 

Controller : 
    
    contains logic for processing req and returning 
    res, usually implemented in router handlers
    

EJS (embedded JS)

    a template engine helps generate HTML dynamically by 
    combining templates with Data   

        reusable HTML structure with placeholders for 
        dynamic content 
    
    steps : 

        create a view folder 
        create .ejs files as required in it 
        embed placeholders in ejs files 

    code : 

        <h1> <%=title%> </h1>

        JS logic : use <%...%> for executing JS code 
            <% if (user) { %>
            <p>Welcome, <%= user %>!</p>
            <% } %>



Passport JS 

    property        meaning  

    startegies      an array of all registered authentication startegies (ex. local, OAuth, JWT, OpenID)
    user            Represents the currently suthenticated user, accessible through req.use
    session         Manages user sessions


Express-session()

    state management 
        http is stateless, sessions allow u to maintain session
    
    user authentication 
        store user login status and data securely 
    
    cookie-based storage 
        sessions are usually stored in cookies 

    
    code : 

        npm install express-sesion 

        const express = require('express')
        const session = require('express-session')

        const app = express();

        app.use(session({
            secret : 'my_Secret_key',
            resave : false,
            saveUninitialized : true,
            cookie : {secure : false}
        }))


        using passortJs and session 

        s1 : import libs 

        const express = require('express')
        const app = express()

        const passport = require('passport')
        const session = require('express-session');

        const LocalStrategy = require('passport-local').Strategy


        s2 : initialize middleware 


        app.use(session({
            secret : "secret",
            resave : false,
            saveUninitialized : true,
        }))

        app.use(passport.initialize())

        app.use(passport.session())

        
        s3 : configure passport with auth strategy 


        passport.use(new LocalStrategy(authUser))


        authUser = (user, password, done) => {
            let authenticated_user = {id:123,name:"abc"}L
            return done(null, authenticated_user)
        }

        s4 : serialize and de-serialize (authenticated) users 


        passport.serializeUser((userObj, done) => {
            done(null, userObj);
        })  //allows authenticated user to be attached to 
            //a unique session 
        

        passport.deserializedUser((userObj, done) => {
            done(null, userObj);
        })

        // now req.user contains authenticated user object 
        for that session 


        s5 : passport.authenticate() as middleware 


        app.post("/login", passport.authenticate('local', {
            successRedirect : "/dashboard",
            failureRedirect : "/login",
        }))


        s6 : req.isAuthenticated() to protect routes 


        checkAuthenticated = (req, res, next) => {
            if(req.isAuthenticated()){
                return next()
            }

            res.redirect("/login")
        }

        app.get("/dashboard", checkAuthenticated, (req,res) => {
            res.render("dashboard.ejs", {name:req.user.name})
        })


        s7 : clear session when logout 

        app.delete("/logout", (req, res) => {
            res.logOut();
            res.redirect("/login");
            console.log('user logged out") ;
        })