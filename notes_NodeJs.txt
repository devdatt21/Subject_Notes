what is node JS 

    open-source, cross-platform JS runtime built on 
    chrome's v8 engine  

        allows developers to run JS on server side

        uses an event-driven, non-blocking i/o model 
            makes it lightweight and efficient 


Node JS runtime environment 

    NodeJs 
        JS runtime written in C++
        can interpret and execute JS
        includes support for nodeJs API 
    
    NodeJS API 
        a set of JS libs that are useful 
        for creating server programs 
    
    V8 (from chrome) 
        JS interpreter ("engine") that nodeJS uses to interpret
        compile and execute JS code 
    
    event loop 
        assists in execution of asnchronous fucntions 
        by continuously checking the call stack and 
        callback queue

browser : 

    used for running client-side JS 

    executes code within a web browser 

    supports webAPIs like window, document, localstorage

    focus on user interface and user interaction

    network requests : fetch API 

NodeJS : 

    used for server-side JS 

    executes code on server 

    supports node JS API (fs, http) 
        uses commonJS module system (require, module.exports) 
        by default 

    focus on backend ops and server funcs.

    allows high concurrency, suitable for handling many 

    connection simultaneously   

    built in module for network requests : http 

Node Command : 

    running node without a filename runs a REPL loop 
        similar to have JS console in chrome 
    
    the node command can be used to execute a JS file 
        node filename 
        node filename.js 

Creating a server : server.js file 

    comst http = require('http');

    const server = http.createServer();

    server.on('request', function(req, res){
        res.statusCode = 200;
        res.setHeader('Content-Type', 'text/plain');
        res.end('HEllo world');
    })

    server.on('listening',function(){
        console.log('server running);
    })

    server.listen(3000);

Node modules 

    each file in Node it's own module 
    module.exports : for exporting a module 
    require : for importing a module 

core and third party modules 

    core : 
        http, os, stream, cypto, https, path, buffer, 
        url, fs, events, util, querystring 
    
    third party modules : 
        express, dotenv, nodemon, passport, mongoose,
        cors, bcrypt, cookie-parser, jsonwebtoken, helmet 
    
Node HTTP module 

    core networking module supporting a high-performance 
    foundation for a HTTP stack 

    using the module 
        const http = require('http')
    
    creating a server : 
        const server = http.createServer(function(req,res){});

    starting the server : 
        server.listen(port, ...);

Node HTTP module 

    incoming request message information available through 
    the first parameter "req" 
        req.header , req.body 
    
    response message is construted on the second parameter 
    "res" 
        res.setHeader("content-type", "text/html");
        res.statusCode = 200;
        res.write('hello world");
        res.end('<html><body><h1>hello world</h1></body></html>');

HTTP server methods 

    http.createServer([requestListener]);

        creates an HTTP server that listens for incoming 
        requests 

        the requestListener is a callback function that 
        gets called whenever an HTTP request is made

    server.listen(port[,hostname][,backlog][,callback])

        starts the server and listens on the specified port 
        and optional hostname 

        the callback is called when the server starts listening 

    server.close([callback])
    
        stops the server from accepting new connections 
        and keep existing connections open until they are 
        handled. 

        optionally takes a callback that is called once the server 
        is closed 
    
    server.on(event, listener)
        attaches a listener function for a specified 
        event, such as 'request', 'connection' or 
        'error' 
    
    server.getConnections(callback) 
        retrieves the number of concurrent connections to 
        the server 
    
HTTP request object 

    common Headers 
        req.headers 
        req.method 
        req.url 
        req.protocol : http or https 
        req.socket : info about tcp socket 

    methods 
        req.on(event, callback) : listens for events(eg 'data','end','error')
        when receiving request data 
            'data' : event triggered when data is available to read 
            'end' : event triggered when there's no more data to read 
        

response object 

    common headers
        res.headsSent : boolean indicating if the headers 
            have already been sent to the client

        res.statusCode : http status code to be sent in 
            response 

        res.statusMessage : status message  associated with 
            status code 


    methods 
        res.writeHead(statusCode, [statusMessage], [headers]):
            sends a response header to the client

        res.write(chunk, [encoding]) : 
            sends a chunk of the response body to the 
            client. this can be called multiple times 

        res.end([data],[encoding]):
            signals that the response is complete 
            optionally sends a final chunk of data 

        res.setHeader(name, value) :
            set a specific header in the response 
        
        res.getHeader(name) :
            returns the value of a specific header 
        
        res.removeHeader(name): 
            removes a specific header from the response 
    

require() = include""

on() = addEventListener() 

listen() = starts accepting connection on the given port number 

    listening event will be emitted when the server 
    has been bound to a port 

    80 = http 
    21 = ftp 
    23 = telnet 
    443 = https 
    25 = smtp 

Localhost   

    we can send an http get request to server running on 
    one of the ports on the local computer using the URL 

HTTP 
    client-server communication protocol 

    allows retrieving interlinked text documents 

    HTTP verbs/methods 
        get : retrieves data 
        post : submit the data to resource 
                triggers change in state 
        put : replace all current represantation of the 
            target resources with the req payload 
        patch : updates target resource 
        delete : deletes specified resources 
        head : asks for a response identical to that of 
                a get request but without the response body 
         
Node for servers 

    the nodejs server APIs are actually pretty low-level 
        u build the request manually
        u write the response manually
        there's a lot of tedious processing code 
    
    sol : use frameworks 


Web worker : 

    when you have to do computation heavy task in the background saperate from the main thread(event loop)

    code : 

        // main.js
        const worker = new Worker('worker.js');

        worker.postMessage('Hello, Worker!');

        worker.onmessage = function(e) {
            console.log('Message from worker:', e.data);
        };

        // worker.js
        self.onmessage = function(e) {
            console.log('Received:', e.data);
            self.postMessage('Task Completed');
        };
        
        Feature                | Web Workers (Browser)           | Worker Threads (Node.js)
        ---------------------- | ----------------------------- | --------------------------
        Runs on               | Browsers                      | Node.js
        Uses                  | Worker API                    | worker_threads module
        Can Access            | Only self, no DOM             | Full Node.js APIs
        Communication         | postMessage()                 | parentPort.postMessage()
        Best for              | Heavy computations (graphics, AI, etc.) | CPU-intensive tasks (encryption, file processing)
        Thread Pool           | No built-in thread pool       | Uses libuv thread pool

ORM : 
    no need to  write raw SQL queries 
    ORM like squalize or prisma will help you do it 
    we can use it's prebuilt function instead of INSERT, SELECT, UPDATE 
    we dont have to change the queries when we change the database 

how JS run : 

    parsing and compilation : 

        parsing : JIT converts code into AST(abstract tree like structure)
        then 
        interpreter(ignition) : AST to bytecode 
        optimization(turboFan) : some bytecode to machinecode for speed 

    EC(execution context) : 

        GEC : created when the script starts 
        FEC : created when a function is called 

    Memory alocation : 

        JS 2 types of memory : 
            heap : stores object and function 
            stack : premitive values and function calls 
    
    JS call stack : 

        LIFO : when a function is called its pushed into the stack 
                when complete then poped off the stack 
    
    event loop and Asyncronous Exection : 

        call stack -> web API zone -> callback queue -> event loop -> call stack -> gone 
    
    garbage collection : 

        using mark and sweep 
        which variable are still in use remains others are collected 
    


