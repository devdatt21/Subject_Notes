
how to create a react project :     

    npx create-react-app myReactApp
    cd myReactApp
    npp start 


contains of myReactApp : 
    node_modules : libraries
    package.json : dependencies with versions and scripts 
    public folder : index.html
    src folder : components and index.js    


javascript XML(JSX)
    syntax extension that allows you to write HTML 
    directly within JS 

    ex. 

        const name = "josh perez";
        const element = <h1> hello, {name} </h1>

        ---------------------------------

        function formatName(user){
            return user.firstName + ' ' + user.lastName ;
        }

        const user = {
            firstName : "devdatt",
            lastName : "rupapara",
        }

        const element = (
            <h1>
                hello, {formateName(user)};
            </h1>
        )


React ex. 

    html file 

        div id="root"

        /div 

    js file 
    
        const root = ReactDOM.creatRoot(document.getElementById('root'));
        root.render(<h1>Hello, world</h1>);

    output 

        Hello, world 
    

React element 

    react element, is a lightweight description of what 
    to render, in javascript XML(JSX).

    elements are smallest building blocks of the react app 

    react elements can represent : DOM tags or user-defined 
        components 

    react elements are plain JS objects and are cheap 
        to create 
    
    react DOM takes care of updating rendered screen to 
        match the react elements 
    
        > reactDOM is a library in react used to interect   
        with the DOM in web application 


Rendering react elements 

    to render a react element 
        pass the DOM element to ReactDOM.createRoot(),
        then pass the react element to root.render()

    updating rendered react elements 
        react only updates what is necessary 
            react compares the elements and it's children
            to previous ones and only make necessary 
            changes to bring the DOM in a desired state 
    
Defining Components 

    components let you split the UI into independent,
    reusable pieces and think about each piece in isolation 

    conceptually, components are like javascript functions 
        input : props
        return react elements 
    
    2 ways to define 
        (always start a component name with a capital letter)
        function 
        class 
    
    <div /> is an html tag and <Welcome /> is a class 
    component and requires Welcome to be in scope 

creating and using compo.

    inside src folder, create a comonent folder 
    app.js is the main component 

    exporting and importing as per (ES6 module)
        export default Greeting;
        import Greeting from './Greeting'
    
    each React component is eancapsulated and can 
    operate independently; this allows you to build 
    complex UIs from simple comps. 

    comps can be nested and can be called multiple times 

Event handling on DOM vs. React elements 

    similar but there are syntex differences 
        react events are named using camelCase, rather 
            than lowercase 
        with JSX u pass a func as event handler, rather 
            than a string 
    
        preventing a default behavior 
            html 
                onsubmit="console.log('clicked'); return false;"
            
            react 
                e.preventDefault();
        
React Router 

    for routing in react

    enables navigation of ur app by handling URL paths 
    and rendering components dynamically

    3 main comps :
        1. <Nav> 
              <Link to="/"> Home </Link>
            ex. 
            
            nav is used to navigate user by clicking on link 
                on page 
                 <Nav>
                    <Link to="/">Home</Link>
                    <Link to="/about">About</Link>
                </Nav>
            
            route is used to render a comp when user gose to 
                particuler route 
                <Routes>
                    <Route path="/" element={<Home />} />
                    <Route path="/about" element={<About />} />
                </Routes>
                
        2. <Routes>

           3. <Route path="/about" component={About} />
        
        </Routes>

        <Route path="/" element={<Home />} />


Inline if with logical && operator 
    
    unreadMessage.length > 0 && 
        <h2> you have {unreadMessage.length} unread messages
        </h2>

Inline If-else 

    unreadMessage.length > 0 ? 
        <h2> you have {unreadMessage.length} unread messages
        </h2>
        :
        <h2> no messages
        </h2>


Rendering Lists 

    display array of items (users, products)
    dynamically generating comps based on data 
    handling dynamic changes (adding/removing)

    to render list in React

        JS's .map() method is used to iterate over
            array
        return JSX for each item 
        each item in a list must have a unique key prop
            to help react efficienlty update the DOM 
            when the list changes. the key helps react 
            identify which items have changed, been 
            added or removed

        code : 

        <ul>
            {items.map(item => (
                <li key={item}> {item} </li>
            ))}
        </ul>

React Hooks 

    react hooks are funcitions that let us hook into 
    the react state and lifecycle methods from 
    function components 
    
    ex. 
        useState() : returns an array with a stateful 
            value and a function to update it 

            allow you to add state to functional components

            useState returns an array with 2 elements 
                state and updater function 
            
            can be used multiple times in the same component 
            
            code : 

                const [state, setState] = useState(initialValue);

                onClick={() => {
                    setCount(count + 1);
                }}

        useEffect() : perform side effects in function
            components 

            to : 
                fetch data 
                manage timers
                manually changing the DOM 

            ex. useEffect(() => {
                fetchData();
            },[]);

            dependencies : listed as array and second argument 
                you can have multiple useEffect hooks to 
                saparate concerns 

                [count]

3 phases of comp lifecycle 

    mounting 
        when comp is inserted into the DOM 

        1. constructor() : 
            called before anything else
            natural place to setup the initial state 
                and other initial value 
            you should always start by calling super(props)
                before anything else.

        2. getDerivedStateFromProps()
            called right before rendering the elements in 
                the DOM 
            
        3. render() :   
            method that actually outputs the HTML to the DOM 

        4. componentDidMount()
            called after the components is rendered 
            where u can run statements that requires that 
                the component is already placed in the dom

    
    updating 
        comp re-renders due to change in prop or state 

        1. getDerivedStateFromProps()
            first method to call when comp gets updated 
            natural place to set state object based on 
                initial props 
            
        2. shouldComponentUpdate() 
            method you can return a boolean value that 
                specifies whether React should continue 
                the the rendering or not 
            

        3. render()
            called when component gets updates 

        4. getSnapshotBeforeUpdate()
            in this method u have access to props and state 
                before the update 
            u can check what values were before the update 

        5. componentDidUpdate()
            called after the comp is updated in DOM 

    
    unmounting 
        when the component is removed from the DOM 

        1. componentWillUnmount()
            called when the comp is about to be removed 
                from the DOM 

    

frontend using plain JS and react 

    feature            plain JS                                 react 


    handling state     DOM manipulation with getElementById     managed with useState hooks 

    event handling     addEventListener on the form elem.       inline onSubmit handler in JSX. 

    rendering          Direct DOM updates                       dynamic rendering via react JSX.

    componentization   static HTML and JS                       reusable react component    

    dynamic updates    manual DOM updates                       React re-renders when state changes 

   


Virtual Dom :   
    desigend to optimize performance by minimizing 
direct interactions with the real DOM 
    each element in the DOM is a node in this tree 

    working :

        react creates a virtual represantation of the UI as a 
        tree of JS objects 

        it generates a new virtual DOM tree to reflect updates 
        state when the application state changes 

        react compares the new virtual DOM tree with the previous 
        one using it efficient diffing algorithm to identify the 
        minimal set of changes required 

        react applies only the neccessary changes to the 
        real DOM, optimizing rendering performance.

    



Error Boundary :

    a Class comp becomes an error boundart if it defines 
    either (or both) of the lifecycle methods 
    static getDerivedStateFromError() 
    or componentDidCatch()

    use static getDerivedStateFromError() to render a fallback
    UI after an error has been thrown.

    use componentDidCatch() to log error information 

    code : 
    
    class ErrorBoundary extends React.Component {
        constructor(props) {
            super(props);
            this.state = { hasError: false };
        }

        static getDerivedStateFromError(error) {
            // Update state so the next render will show the fallback UI.
            return { hasError: true };
        }

        componentDidCatch(error, errorInfo) {
            // You can also log the error to an error reporting service
            logErrorToMyService(error, errorInfo);
        }

        render() {
            if (this.state.hasError) {
            // You can render any custom fallback UI
            return <h1>Something went wrong.</h1>;
            }

            return this.props.children; 
        }
    }

    then u can use it as a regular comp 
    
    <ErrorBoundary>
        <MyWidget />
    </ErrorBoundary>


    error boundaries work like a JS catch{} block,
    but for components. only class components can be error 
    boundaries.

    in practices, most of the time you'll want to declare 
    an error boundary comp once and use it throughout 
    your application

    note that error boundaries only catch errors in the 
    comps below them in the tree 

    an error boundary can't catch an error within itself
    
    if an error coundary fails trying to render the error 
    message, the error will propogate to the closest error
    boundary above it.

    this, too, is similar to how the catch {} block works 
    in JS.


props and state : 

    props : ways to pass properties/data from parent component
    to child component while the 

        the data is passed from 1 comp to another 

        it is immutable (cannot be modified)

        props can be used with state and functional comp 

        props are read-only

    state : is the real-time data available to use within only 
    that component.

        data is passed within comp 

        it is mutable 

        the state can be used only with the state comp/class 
        comp 




All Basic hooks : 

JSX : 

    javascript XML 
    used to describe UI 
    allows to write html like code directly within JS 
    under the hood, HSX gets trasplied into reguler JS using 
        tool like babel 
    if you dont want to use JSX then you have to use 
        React.createElement('div',{id:'hello',className:'dummClass'},React.createElement('h1',null,'hello vishwas'));
        

        Babel : (traslator)

            you wrote something in the latest fancy version 
            of JS, but not all browsers or systems understand 
            it yet.

            babel takes your code and converts it into a simpler 
            version that all browsers and environments can understand
            it makes your code work everywhere, even on older browser

            JS compiler and toolchain mainly used to convert modern
            JS into older versions so that it can run in environments
            or browsers that dont support the latest features                   




Life cycles in react

Optimization techniques (useMemo, useCallback) : 
    The useCallback and useMemo Hooks are similar. The main difference is that 
    useMemo returns a memoized value and useCallback returns a memoized function.
    
    useMemo() : 
        used to memoize a computed value so that is only recalculated 
        when its dependencies change.

        it avoids recalculating expensive operations unnecessarily

        code :  
            const memoizedValue = useMemo(()=> computeValue, [dependencies])

                computeValue : a function that returns the value to be memoizedValue
                dependencies : an array of values that when changed, will re-trigger the computation

    useCallback() : 
        const addTodo = useCallback(() => {
            setTodos((t) => [...t, "New Todo"]);
        }, [todos]);

        Comparison: useMemo vs useCallback
        Feature	    useMemo	                        useCallback
        Purpose	    Memoize a value	                Memoize a function
        Return      Value	Returns the memoized    result	Returns the memoized function
        Common      Use Case	Avoid recalculating	Avoid re-creating functions unnecessarily
                        expensive operations
Pure Component : 

    in react is like a super-efficient worker who does a task only 
    if absolutely necessary. 

    it checks if the input (data or props) has changed before doing 
    it's work (re-rendering). 

    if the input hasn't changed, it just skips the task to save time 
    and resources.

    it automatically prevents unnecessary re-renders 
    it performs shallow comparison of its props and state 
    if the values havent changed, react skips re-rendering 
        the component 

        2 types : 

            class-based : 
                React.PureComponent
            
            functional : 
                React.memo() (optimised)

    normal comp will re-render every time it's parent 
    comp re-renders 

    but 

    pure comp performs a shallow comparison of the current props/state 
    with the previous ones before re-rendering.

    use : 
        when your comp renders the same output for the same set 
        of props and state 



state management (Redux, context and difference) :  
    
    context API : 
        to avoid prop drilling (passing props through many layers of components)
        allows to share state btw components at 
        different nesting levels 

    code : 
            import React, {useContext, useState, createContext, Children} from "react";

            // creating context 

            const MyContext = createContext();

            //provider function (we will wrap this function around the chlid function to access all the need data)

            const MyProvider = ({children}) => {
                const [name, setName] = useState("Devdatt")
                
                return (
                    <MyContext.Provider value={{name, setName}}>
                        {children}
                    </MyContext.Provider>
                )
            }

            const ChildComponent = () => {
                const {name, setName} = useContext(MyContext);

                return(
                    <div className="flex flex-col items-center ">
                        <h1>{name} </h1>
                        <button className="bg-black text-white font-bold m-2 p-2 rounded-sm" onClick={() => setName("John wick")}> Change Name </button>
                    </div>
                )
            }

            const ContextComp = () => {


                return (
                    <MyProvider>
                        <ChildComponent/>
                    </MyProvider>
                )
            }

            export default ContextComp;



render props : 
    technique for sharing code btw react comps using a 
    props whose value is a function 

    a comp with a render prop takes a func that 
    returns a react element and calls it instead of
    implementing its own render logic.

     code : 
        
        import React, { useState, useEffect } from "react";

        function Clock({ render }) {
            const [time, setTime] = useState(new Date());

            useEffect(() => {
                const timer = setInterval(() => {
                    setTime(new Date());
                }, 1000);

                return () => {
                    clearInterval(timer);
                };

            }, []);

            return render(time);
        }

        function App() {
            return (
                <div className="App">
                <h1>Render Props Example</h1>
                <Clock
                    render={(time) => {
                        return <p>The current time is {time.toLocaleTimeString("en-US")}</p>;
                    }}
                />
                </div>
            );
        }
   

Routing : 

    code : 

        import React from "react";
        import { BrowserRouter as Router, Routes, Route, Link } from "react-router-dom";
        import Home from "./Home";
        import About from "./About";
        import Contact from "./Contact";

        function App() {
        return (
            <Router>
            <nav>
                <Link to="/">Home</Link> | <Link to="/about">About</Link> | <Link to="/contact">Contact</Link>
            </nav>
            <Routes>
                <Route path="/" element={<Home />} />
                <Route path="/about" element={<About />} />
                <Route path="/contact" element={<Contact />} />
            </Routes>
            </Router>
        );
        }

        export default App;




        import React from "react";
        import { BrowserRouter as Router, Routes, Route, Link, useParams } from "react-router-dom";

        function App() {
        return (
            <Router>
            <nav>
                <Link to="/">Home</Link> | <Link to="/user/1">User 1</Link> | <Link to="/user/2">User 2</Link>
            </nav>
            <Routes>
                <Route path="/" element={<Home />} />
                <Route path="/user/:id" element={<User />} />
            </Routes>
            </Router>
        );
        }

        function Home() {
            return <h2>Welcome to the Home Page!</h2>;
        }

        function User() {
            const { id } = useParams(); // Extract the dynamic "id" parameter from the URL.
            return <h2>User Page: User ID is {id}</h2>;
        }

        export default App;





        import { useNavigate } from "react-router-dom";

        function Home() {
            const navigate = useNavigate();
            return <button onClick={() => navigate("/about")}>Go to About</button>;
        }
